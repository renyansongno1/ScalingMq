apiVersion: storage.k8s.io/v1
kind: CSIDriver
metadata:
  name: scalingmq-storage-csi
spec:
  attachRequired: true
  podInfoOnMount: true
---
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: org.scalingmq.csi.storage.class
  namespace: kube-system
  annotations:
    storageclass.kubernetes.io/is-default-class: "true"
provisioner: org.scalingmq.csi
---
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: scalingmq-storage-csi-node
  namespace: kube-system
spec:
  selector:
    matchLabels:
      app: scalingmq-storage-csi-node
  template:
    metadata:
      labels:
        app: scalingmq-storage-csi-node
        role: scalingmq-storage-csi
    spec:
      serviceAccount: scalingmq-storage-csi-sa
      hostNetwork: true
      containers:
        - name: scalingmq-storage-csi
          image: scalingmq-csi:v1.0
          env:
            - name: LANG
              value: en_US.UTF-8
            - name: CLOUD_ENV
              value: "LOCAL"
          imagePullPolicy: "IfNotPresent"
          securityContext:
            privileged: true
            capabilities:
              add: ["SYS_ADMIN"]
            allowPrivilegeEscalation: true
          volumeMounts:
            - name: plugin-dir
              mountPath: /csi
            - name: pods-mount-dir
              mountPath: /var/lib/kubelet
              # needed so that any mounts setup inside this container are
              # propagated back to the host machine.
              mountPropagation: "Bidirectional"
            - name: device-dir
              mountPath: /dev
        - name: csi-node-driver-registrar
          image: k8s.gcr.io/sig-storage/csi-node-driver-registrar:v2.5.1
          args:
              - "--v=5"
              - "--csi-address=$(ADDRESS)"
              - "--kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)"
          lifecycle:
              preStop:
                exec:
                  command: [ "/bin/sh", "-c", "rm -rf /registration/org.scalingmq.csi /registration/org.scalingmq.csi-reg.sock" ]
          env:
              - name: ADDRESS
                value: /csi/csi.sock
              - name: DRIVER_REG_SOCK_PATH
                value: /var/lib/kubelet/plugins/org.scalingmq.csi/csi.sock
              - name: KUBE_NODE_NAME
                valueFrom:
                  fieldRef:
                    fieldPath: spec.nodeName
          volumeMounts:
              - name: plugin-dir
                mountPath: /csi/
              - name: registration-dir
                mountPath: /registration/
      volumes:
        - name: registration-dir
          hostPath:
            path: /var/lib/kubelet/plugins_registry/
            type: DirectoryOrCreate
        - name: plugin-dir
          hostPath:
            path: /var/lib/kubelet/plugins/org.scalingmq.csi
            type: DirectoryOrCreate
        - name: pods-mount-dir
          hostPath:
            path: /var/lib/kubelet
            type: Directory
        - name: device-dir
          hostPath:
            path: /dev

---
##############################################
###########                       ############
###########   Controller plugin   ############
###########                       ############
##############################################

kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: csi-do-controller
  namespace: kube-system
spec:
  serviceName: "csi-do"
  selector:
    matchLabels:
      app: csi-do-controller
  replicas: 1
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: csi-do-plugin
      labels:
        app: csi-do-controller
        role: csi-do
    spec:
      priorityClassName: system-cluster-critical
      serviceAccount: csi-do-controller-sa
      containers:
        - name: csi-provisioner
          image: k8s.gcr.io/sig-storage/csi-provisioner:v3.2.1
          args:
            - "--csi-address=$(ADDRESS)"
            - "--default-fstype=ext4"
            - "--v=5"
          env:
            - name: ADDRESS
              value: /var/lib/kubelet/plugins/org.scalingmq.csi/csi.sock
          imagePullPolicy: "IfNotPresent"
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/kubelet/plugins/org.scalingmq.csi/
        - name: csi-attacher
          image: k8s.gcr.io/sig-storage/csi-attacher:v3.5.0
          args:
            - "--csi-address=$(ADDRESS)"
            - "--v=5"
            - "--reconcile-sync=30m"
            - "--timeout=2m"
          env:
            - name: ADDRESS
              value: /var/lib/kubelet/plugins/org.scalingmq.csi/csi.sock
          imagePullPolicy: "IfNotPresent"
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/kubelet/plugins/org.scalingmq.csi/
        - name: csi-resizer
          image: k8s.gcr.io/sig-storage/csi-resizer:v1.5.0
          args:
            - "--csi-address=$(ADDRESS)"
            - "--timeout=30s"
            - "--v=5"
            # DO volumes support online resize.
            - "--handle-volume-inuse-error=false"
          env:
            - name: ADDRESS
              value: /var/lib/kubelet/plugins/org.scalingmq.csi/csi.sock
          imagePullPolicy: "IfNotPresent"
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/kubelet/plugins/org.scalingmq.csi/
        - name: scalingmq-storage-csi
          image: scalingmq-csi:v1.0
          imagePullPolicy: "IfNotPresent"
          env:
            - name: LANG
              value: en_US.UTF-8
            - name: CLOUD_ENV
              value: "LOCAL"
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/kubelet/plugins/org.scalingmq.csi/
      volumes:
        - name: socket-dir
          emptyDir: {}

---

kind: ServiceAccount
apiVersion: v1
metadata:
  name: csi-do-controller-sa
  namespace: kube-system

---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-do-provisioner-role
rules:
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch", "create", "delete"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["list", "watch", "create", "update", "patch"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshots"]
    verbs: ["get", "list"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotcontents"]
    verbs: ["get", "list"]
  - apiGroups: [ "storage.k8s.io" ]
    resources: [ "csinodes" ]
    verbs: [ "get", "list", "watch" ]
  - apiGroups: [ "" ]
    resources: [ "nodes" ]
    verbs: [ "get", "list", "watch" ]
  - apiGroups: ["storage.k8s.io"]
    resources: ["volumeattachments"]
    verbs: ["get", "list", "watch"]

---

kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-do-provisioner-binding
subjects:
  - kind: ServiceAccount
    name: csi-do-controller-sa
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: csi-do-provisioner-role
  apiGroup: rbac.authorization.k8s.io

---
# Attacher must be able to work with PVs, nodes and VolumeAttachments
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-do-attacher-role
rules:
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch", "update", "patch"]
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["csinodes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["volumeattachments"]
    verbs: ["get", "list", "watch", "update", "patch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["volumeattachments/status"]
    verbs: ["patch"]

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-do-attacher-binding
subjects:
  - kind: ServiceAccount
    name: csi-do-controller-sa
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: csi-do-attacher-role
  apiGroup: rbac.authorization.k8s.io

---

# Snapshotter sidecar

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-do-snapshotter-role
rules:
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["list", "watch", "create", "update", "patch"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotcontents"]
    verbs: ["get", "list", "watch", "update", "patch"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotcontents/status"]
    verbs: ["update", "patch"]

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-do-snapshotter-binding
subjects:
  - kind: ServiceAccount
    name: csi-do-controller-sa
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: csi-do-snapshotter-role
  apiGroup: rbac.authorization.k8s.io

---

# Resizer must be able to work with PVCs, PVs, SCs.
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-do-resizer-role
rules:
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch", "update", "patch"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims/status"]
    verbs: ["update", "patch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["list", "watch", "create", "update", "patch"]

---

kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-do-resizer-binding
subjects:
  - kind: ServiceAccount
    name: csi-do-controller-sa
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: csi-do-resizer-role
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: scalingmq-storage-csi-sa
  namespace: kube-system
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-do-driver-registrar-binding
  namespace: kube-system
subjects:
  - kind: ServiceAccount
    name: scalingmq-storage-csi-sa
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: csi-do-driver-registrar-role
  apiGroup: rbac.authorization.k8s.io
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-do-driver-registrar-role
  namespace: kube-system
rules:
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get", "list", "update"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["list", "watch", "create", "update", "patch"]
---